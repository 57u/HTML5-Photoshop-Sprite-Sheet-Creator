/*Copyright (c) 2014 William Malone (www.williammalone.com)Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*//*<javascriptresource>    <name>Create Sprite Sheet from Layers...</name></javascriptresource>*/var i, prefRulerUnits, prefTypeUnits, frames, frameWidth, frameHeight, mp, dialog,    exit = function () {        dialog.close();    },    createSprite = function () {            var i, frameIndex;        dialog.hide();                app.activeDocument.resizeCanvas(frames * frameWidth, frameHeight, AnchorPosition.TOPLEFT);        frameIndex = 0;        for (i = 0; i < frames; i += 1) {            if (app.activeDocument.layers[i].visible) {                                if (dialog.msgPnl.topDownCheckbox.value) {                    activeDocument.layers[i].translate(frameWidth * frameIndex, 1);                } else {                    activeDocument.layers[i].translate((frames - 1) * frameWidth - frameWidth * frameIndex, 1);                }                frameIndex += 1;            }        }        app.activeDocument.mergeVisibleLayers();        app.activeDocument.layers[0].name = "Sprite Sheet with " + frames + " Frames";    };if (app && app.preferences) {    // Save the current preferences    prefRulerUnits = app.preferences.rulerUnits,    prefTypeUnits = app.preferences.typeUnits,    // Change the current preferences to pixel units    app.preferences.typeUnits = TypeUnits.PIXELS;    app.preferences.rulerUnits = Units.PIXELS;}try {    if (app && app.activeDocument) {                // Determine number of visible layers        frames = 0;        for (i = 0; i < app.activeDocument.layers.length; i += 1) {            if (app.activeDocument.layers[i].visible) {                frames += 1;            }        }            if (frames <= 1) {            alert("Error: Sprite sheet requires more than one visible layer");        } else {                        // Create dialog            dialog = new Window('dialog', 'Sprite Sheet Creator');            dialog.msgPnl = dialog.add('panel', undefined, undefined);            dialog.msgPnl.message = dialog.msgPnl.add('StaticText', undefined, 'Initializing...', {                multiline: true             });            dialog.msgPnl.frames = dialog.msgPnl.add('StaticText', undefined, 'Number of Frames:');            dialog.msgPnl.frames.alignment = 'left';            dialog.msgPnl.frames.hide();            dialog.msgPnl.mp = dialog.msgPnl.add('StaticText', undefined, 'MegaPixels (MP): ', {                justify: 'left'             });            dialog.msgPnl.mp.alignment = 'left';            dialog.msgPnl.mp.hide();            /*dialog.msgPnl.rows = dialog.msgPnl.add('EditText', undefined, 1);            dialog.msgPnl.rows.characters = 3;            dialog.msgPnl.rows.minvalue = 0;            dialog.msgPnl.rows.maxvalue = 999;            dialog.msgPnl.rows.alignment = 'left';            dialog.msgPnl.rows.enabled = false;*/            dialog.msgPnl.topDownCheckbox = dialog.msgPnl.add('checkbox', undefined,            'First Frame is Top Layer');            dialog.msgPnl.topDownCheckbox.value = true;            dialog.msgPnl.topDownCheckbox.enabled = false;            dialog.btnGrp = dialog.add('group');            dialog.btnGrp.cancelButton = dialog.btnGrp.add('button', undefined, 'Cancel');            dialog.btnGrp.cancelButton.onClick = exit;            dialog.btnGrp.cancelButton.alignment = ['left', 'bottom'];            dialog.btnGrp.createButton = dialog.btnGrp.add('button', undefined, 'Ok');            dialog.btnGrp.createButton.onClick = createSprite;            dialog.btnGrp.cancelButton.alignment = ['right', 'bottom'];            dialog.btnGrp.createButton.enabled = false;                        dialog.msgPnl.frames.text = "Frames: " + frames;            dialog.msgPnl.frames.show();            dialog.msgPnl.message.text = "";            // Determine the frame width based on the active document's dimensions            frameWidth = app.activeDocument.width;            frameHeight = app.activeDocument.height;            // Determine the MP to see if the image is too large to load on iOS devices            mp = frameHeight * frameWidth / 1024 / 1024;                        dialog.msgPnl.mp.text = "MP: " + mp.toFixed(2);            dialog.msgPnl.mp.show();                        if (mp * frames > 5) {                dialog.msgPnl.message.text = "Warning: The sprite sheet is too large to be loaded on iOS devices (see http://wmalone.com/maximage for details)";            } else if (mp * frames > 3) {                dialog.msgPnl.message.text = "Warning: The sprite sheet is too large to be loaded on legacy iOS devices (see http://wmalone.com/maximage for details)";            } else {                //dialog.msgPnl.message.text = "Ready to create sprite sheet...";            }            dialog.btnGrp.createButton.enabled = true;               dialog.msgPnl.topDownCheckbox.enabled = true;            //dialog.msgPnl.rows.enabled = true;            dialog.show();        }    } else {        alert("Error: No document open");    }} catch (ex) {    alert("Error: No document open");}if (app && app.preferences) {    // Revert to the previous preferences    app.preferences.typeUnits = prefTypeUnits;    app.preferences.rulerUnits = prefRulerUnits;}